// 1

let timesRun = 0
function myTimeout (myFunc, n) {
const myInterval = setInterval(function() {
timesRun += 1;
    if(timesRun === 1){
        clearInterval(myInterval);
    };
   return myFunc()
}, n);
}

function myFunc() {
console.log( "Hello")
}

console.log(myTimeout(myFunc,1000))


// 2

function squarePromise (prom) {
return new Promise ((resolve, reject) => {
prom.then((value) => {
if (typeof value === "number") {
resolve(value*value);
} else if (typeof value == "number" ){
resolve(+value*+value);
} else {
resolve(`Cannot convert ${value} into a number!`);
}
})
}).catch(function(value) {
reject(value);
})
}


const prom = new Promise ((resolve, reject) => {
  resolve(19);
});

squarePromise(prom).then(function(data) {
console.log(data);
}).then((data) => console.log(data)).catch((error) => console.log(error))




// 3

const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

function getMonthName (x) {
return monthNames[x+1];
}

console.log(5)


// 4
function longestTime(h,m,s) {
if (h * 60 > m) {
if (h * 60 * 60 > s) {
 return h;
}
} else {
if (m > h * 60) {
if (m * 60 > s) {
return m;
} else {
if ( s > h * 60 * 60 ) {
if ( s > m * 60 ) {
return s;
}
}
}
}
}
}

console.log(longestTime(2, 300, 15000))

// 5


function threeDaysAgo() {
date = new Date(date)
 date.setDate(date.getDate() - 3);
   return date.toLocaleDateString();
 }
 
date = new Date (2018,0,3)
console.log(threeDaysAgo())
